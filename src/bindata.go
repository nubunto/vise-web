// Code generated by go-bindata.
// sources:
// components/Upload.vue
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _componentsUploadVue = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x0c\x84\xc5\x5a\x46\x6c\x29\x8f\x1e\x1a\x57\x36\x7a\x58\x2c\x50\xa0\xb7\xdd\xf6\xb2\x08\xba\xb4\x34\x8e\x88\xd0\x22\x4b\x52\xf6\x06\x59\xfd\xf7\x0e\x49\xbd\xec\xd8\x28\x7c\x48\xc8\x19\xce\xcc\x37\x6f\x2b\x33\xb9\xe6\xca\xae\x27\xf8\x43\x49\x6d\xa1\xc0\x2d\xab\x85\x85\xb7\x09\x80\x46\x56\xbc\x42\x3c\xf3\x04\x80\x2d\xb9\x49\x84\x64\xc5\x9f\xbc\x7a\x31\xf1\x8c\x98\xcd\x9c\xfe\x15\xcc\xb2\x41\x4a\xa3\xad\x75\xd5\x12\x00\xb5\x41\xfd\x55\xbe\x60\xb5\x04\x21\x73\x26\xbe\x58\xa9\xd9\x33\x26\xcf\x68\xff\xb0\xb8\x8b\xa7\x4e\x60\x61\x9d\xc4\x74\x06\x3f\x7f\xc2\x74\x3a\x6f\x55\x0b\xf6\x6a\x96\x70\xdb\x91\x5b\x2e\x90\xe8\x6f\x4f\x9e\x6e\x3a\xf4\x5c\xee\x54\x6d\xb1\x58\xb6\x90\x7b\x8e\x87\xcf\x4e\x74\x70\x89\x98\x4c\x3b\xc7\x60\xd5\xa9\x93\x39\xa9\x21\x76\x7c\x4e\xdc\xdb\xdf\xe8\xc8\x42\x84\x1e\x27\x11\x58\x3d\xdb\x92\xd8\x37\x37\x83\x19\x1f\x5d\xa2\x6a\x53\xc6\x03\x8b\x62\xd4\x62\x09\xd3\xd2\x5a\xb5\x4c\x53\x1f\x65\x29\x8d\x5d\xfe\x7a\xfb\x78\x3b\x85\x9b\x91\xd5\x6f\xfc\x69\x3e\xd2\x73\xbc\x8a\xed\x70\x79\x2c\x92\x98\x7a\x63\xac\x8e\xef\x7e\x99\xf5\xc2\x4d\x77\x6d\x26\xbd\x23\x2e\xcd\x74\x1c\xa7\x63\x87\xb6\x94\x85\xe9\xb2\x51\x2b\x57\x30\x97\x0f\x88\x71\x08\x04\x13\xa5\x71\x8f\x95\xfd\x14\xca\x1d\xcf\x46\x89\x72\x7e\x50\x4e\xbc\x4f\x1f\x50\x04\xc7\x5a\xef\x6e\x9f\x46\x82\xae\x40\x9d\xa0\xbb\xb7\x4f\x7c\x0b\xb1\xb7\xf1\xf1\xa3\x17\x19\xe7\x2f\xa8\x51\xbf\xac\xa0\xc2\x03\x7c\x96\x7a\xf7\x89\xc8\x78\x88\xd4\xbd\x26\x4c\x29\xac\x8a\xa3\xe6\x98\x07\x9c\xbe\x9f\x2e\x68\x38\xc0\x4e\xd6\x83\x9f\x17\x73\xfe\x75\x62\xef\x63\x1c\x94\x82\x80\x2b\x6d\xa2\xa8\xa6\xf1\xf9\x2a\xa7\x4c\xf1\xd4\xb0\xbd\x33\xe9\x60\x66\x89\x2d\xb1\x8a\x63\x8d\x46\xc9\xca\xe0\x1c\x8c\x65\xb6\x36\x73\xaa\xd7\xbf\x35\x1a\x3b\x83\xd5\x1a\xc6\x2d\x74\x34\x1b\xe6\xcc\x6c\x38\xd5\x60\x2c\xf1\x81\xb8\xa7\x7f\xec\x71\x22\x3a\x77\x49\x3f\xe8\x7e\xbd\x56\xf5\x78\xba\xbb\xd6\x4b\x72\x66\xf3\x32\x8e\x9d\xf6\xff\x87\x92\x13\x92\xa4\x64\x0a\xf9\x7c\x41\xe3\x52\x57\x37\x61\x38\x7a\x27\x4e\x27\xb8\x0f\xa9\x6b\xba\x9e\x31\x16\xd2\x82\x9e\xbf\x5f\xae\xd3\x87\xb7\x5e\xad\x49\x85\xc3\xf9\x3e\x79\x57\x6c\x5a\x4f\x31\x59\xba\xb6\x90\xa3\xfc\xfb\x5e\x7a\x97\x7b\x8f\xd7\x47\x3d\x1b\x66\x77\xd2\x4c\xb2\xb4\xdb\xc5\x19\x55\x5f\x09\x66\x91\xae\xe5\xdd\xfa\x6f\x6e\x30\x4b\xe9\x32\xc9\x68\x6b\xed\x00\xab\xdc\xbe\x2a\x5c\x45\x3b\x1a\x5d\xae\x98\xb6\xa9\xe3\x2f\x1c\x42\x04\x95\xdc\x33\xc1\x0b\xaf\x0d\x90\x15\x7c\x0f\xb9\x60\xc6\xac\x22\xe7\xd2\x62\xcb\x51\x14\xc0\x2b\x5a\x9a\xe1\x1e\xad\xbd\x17\x63\xc1\x8d\xad\x5a\x2e\xf1\x8d\x62\xd5\xda\x6d\x10\xf2\xcf\x5d\x3b\xbe\x37\x01\xc1\x11\x67\x39\x82\xfd\x02\xc5\xd2\x4f\xbe\xdb\x6a\x2d\x77\x9d\x6d\xb4\xff\x0b\x28\x29\xc1\xf4\x26\x4e\x7d\x53\xcc\x96\x8b\x83\x76\x43\xaa\xa3\x13\xa0\x53\xb9\xa8\x85\xb6\xf8\xc3\x46\x40\xd9\xca\xb1\x94\xa2\x40\xbd\x8a\xfe\xf2\x4b\x0f\x02\xfc\x31\xec\x70\x51\xed\x4b\xb0\xce\x8b\x55\x44\xeb\xe2\xc1\x05\xb1\x93\x05\x0a\x4f\x9a\x0e\x44\xb3\x82\xcb\xa8\x0d\x2b\x3c\x50\x92\x6b\x22\x1e\x3a\x04\xc1\x36\x28\xdc\xaf\x4a\x6b\x68\xfd\xe0\x97\x5f\x96\xfa\x87\x80\xad\x2e\x23\x3f\x5e\x8d\xfc\x78\x1e\x99\xd8\x8f\x57\x21\xdf\xdd\x5f\x0d\x4d\x2a\x67\xb1\x1d\xff\xee\xfe\x12\x7a\xe8\x81\xac\x0c\xc7\xa6\xb6\x56\x56\x5d\x59\x0f\xb4\x3c\xcd\x02\xb7\x5b\xcc\x2d\x04\x42\xf0\xe7\xd2\x82\x6b\x45\xf8\x3d\x17\x3c\x7f\x59\x45\xc3\xaf\x59\x8b\xff\xa5\xde\xec\xb8\xf5\x18\xc1\x1e\x8d\x88\x9f\x05\x3a\x47\xcd\xa5\xe5\x21\x3a\x1d\x86\x5c\x0a\x30\x43\x20\xe5\xfd\x3a\xb4\x0d\x16\xe0\x3f\x1f\x68\xe0\xee\x47\x93\xe1\x92\xe5\x87\x37\x3a\xea\xde\xfd\xc2\xc7\xee\x9b\x9e\x57\xc3\xc7\xc7\x20\xc5\xa0\xd4\xb8\x5d\x45\x6f\x6f\xfe\x27\x86\x96\x4a\xd3\x44\xeb\x96\xea\xbe\x00\x9a\x26\x4b\xd9\xf9\x56\xed\x8f\x61\x27\xfc\x17\x00\x00\xff\xff\x7a\x42\xaf\xa0\xb4\x09\x00\x00")

func componentsUploadVueBytes() ([]byte, error) {
	return bindataRead(
		_componentsUploadVue,
		"components/Upload.vue",
	)
}

func componentsUploadVue() (*asset, error) {
	bytes, err := componentsUploadVueBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "components/Upload.vue", size: 2484, mode: os.FileMode(436), modTime: time.Unix(1454536855, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"components/Upload.vue": componentsUploadVue,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"components": &bintree{nil, map[string]*bintree{
		"Upload.vue": &bintree{componentsUploadVue, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

